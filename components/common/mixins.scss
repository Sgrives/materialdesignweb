@import './palettes';
@import '../textfield/theming.scss';

@mixin allHandsets {
  @media
    screen
      and (orientation:portrait)
      and (min-width: $breakpoint-portrait-handset-small)
      and (max-width: $breakpoint-portrait-handset-max - 1),
    screen
      and (orientation:landscape)
      and (min-width: $breakpoint-landscape-handset-small)
      and (max-width: $breakpoint-landscape-handset-max - 1) {
    @content;
  }
}

@mixin allTablets {
  @media
    screen
      and (orientation:portrait)
      and (min-width: $breakpoint-portrait-tablet-small)
      and (max-width: $breakpoint-portrait-tablet-max - 1),
    screen
      and (orientation:landscape)
      and (min-width: $breakpoint-landscape-tablet-small)
      and (max-width: $breakpoint-landscape-tablet-max - 1) {
    @content;
  }
}

@mixin buildTheme($primary, $accent, $warn, $background:"grey", $name:"default") {
  $namespace: null;
  @if ($name != "default") {
    $namespace: ".mdw-theme-"#{$name};
  }

  @include buildPalettes($namespace, $primary, $accent, $warn, $background);
  #{if($namespace, #{$namespace}, ":root")} {
    --primary-text-color: rgba(0,0,0,0.87);
    --secondary-text-color: rgba(0,0,0,0.54);
    --disabled-color: rgba(0,0,0,0.38);
    --divider-color: rgba(0,0,0,0.12);
    @include textfieldLightThemeVariables();
  }
    
  @include buildAllVariationVariables($namespace, $primary, $accent, $warn, $background, 'light') {
    --primary-text-color: rgba(0,0,0,0.87);
    --secondary-text-color: rgba(0,0,0,0.54);
    --disabled-color: rgba(0,0,0,0.38);
    --divider-color: rgba(0,0,0,0.12);
    @include textfieldLightThemeVariables();
  }

  @include buildAllVariationVariables($namespace, $primary, $accent, $warn, $background, 'dark') {
    --primary-text-color: rgba(255,255,255,1.0);
    --secondary-text-color: rgba(255,255,255,0.70);
    --disabled-color: rgba(255,255,255,0.50);
    --divider-color: rgba(255,255,255,0.12);
    @include textfieldDarkThemeVariables();
  }
}

@mixin buildPalettes($namespace, $primary, $accent, $warn, $background) {
  @include buildPalette($namespace, 'primary', map-get($palettes, $primary));
  @include buildPalette($namespace, 'accent', map-get($palettes, $accent));
  @include buildPalette($namespace, 'warn', map-get($palettes, $warn));
  @include buildPalette($namespace, 'background', map-get($palettes, $background));
}

@mixin buildAllVariationVariables($namespace, $primary, $accent, $warn, $background, $variation) {
  @include buildVariationVariables($namespace, 'primary', map-get($palettes, $primary), $variation) { @content; }
  @include buildVariationVariables($namespace, 'accent', map-get($palettes, $accent), $variation) { @content; }
  @include buildVariationVariables($namespace, 'warn', map-get($palettes, $warn), $variation) { @content; }
  @include buildVariationVariables($namespace, 'background', map-get($palettes, $background), $variation) { @content; }
}

@mixin buildPalette($namespace, $color, $palette) {
  @each $tone in "50", "100", "200", "300", "400", "500", "600", "700", "800", "900", "A100", "A200", "A400", "A700" {
    $value: map-get($palette, $tone);
    #{if($namespace, #{$namespace}, ":root")} {
      --#{$color}-#{$tone}-color: red($value),green($value),blue($value);
      @if ($tone == "500") {
        --#{$color}-color: red($value),green($value),blue($value);
      } 
    }
  }
  @each $tone in "50", "100", "200", "300", "400", "500", "600", "700", "800", "900", "A100", "A200", "A400", "A700" {
    @if($tone == "500") {
      .mdw-theme-filled[mdw-color="#{$color}"] {
        background-color: unquote("rgb(var(--#{$color}-color))");
      }
    }
    .mdw-theme-filled[mdw-color="#{$color}"][mdw-tone="#{$tone}"] {
      background-color: unquote("rgb(var(--#{$color}-#{$tone}-color))");
    }
  }
}

@mixin buildVariationVariables($namespace, $color, $palette, $variation) {
  @each $tone in map-get($palette, $variation) {
    @if ($tone == "500") {
      #{$namespace} .mdw-theme-filled[mdw-color="#{$color}"],
      #{$namespace}.mdw-theme-filled[mdw-color="#{$color}"] {
        @content;
      }
    }
    #{$namespace} .mdw-theme-filled[mdw-color="#{$color}"][mdw-tone="#{$tone}"],
    #{$namespace}.mdw-theme-filled[mdw-color="#{$color}"][mdw-tone="#{$tone}"] {
      @content;  
    }
  }
}