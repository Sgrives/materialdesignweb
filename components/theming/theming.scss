@import 'palettes.scss';
@import '../core/bottomnav/theming.scss';
@import '../core/button/theming.scss';
@import '../core/list/theming.scss';
@import '../core/menu/theming.scss';
@import '../core/selection/theming.scss';
@import '../core/tab/theming.scss';
@import '../core/textfield/theming.scss';
@import '../core/toolbar/theming.scss';

@import '../complex/dialog/theming.scss';

$ie11-tones: (
  primary: ("500", "700"),
  accent: ("A100", "A200", "A400", "A700"),
  warn: ("500", "700"),
  background: ("50", "100", "800", "900")
) !default;

$tone-list: ("50", "100", "200", "300", "400", "500", "600", "700", "800", "900", "A100", "A200", "A400", "A700");
$added-palettes-list: ();
$theme-map: ();
$explicit-color-list: ();

@mixin lightVariables($color:"background") {
  @include bottomnavThemeVariables($color, 'light');
  @include buttonThemeVariables($color, 'light');
  @include listThemeVariables($color, 'light');
  @include menuThemeVariables($color, 'light');
  @include selectionThemeVariables($color, 'light');
  @include tabThemeVariables($color, 'light');
  @include textfieldThemeVariables($color, 'light');
  @include toolbarThemeVariables($color, 'light');
  
  @include dialogThemeVariables($color, 'light');
}

@mixin darkVariables($color:"background") {
  @include bottomnavThemeVariables($color, 'dark');
  @include buttonThemeVariables($color, 'dark');
  @include listThemeVariables($color, 'dark');
  @include menuThemeVariables($color, 'dark');
  @include selectionThemeVariables($color, 'dark');
  @include tabThemeVariables($color, 'dark');
  @include textfieldThemeVariables($color, 'dark');
  @include toolbarThemeVariables($color, 'dark');

  @include dialogThemeVariables($color, 'dark');
}

@mixin componentContrastRules($type: 'var', $theme: null) {
  @include bottomnavContrastRules($type, $theme);
  @include buttonContrastRules($type, $theme);
  @include listContrastRules($type, $theme);
  @include menuContrastRules($type, $theme);
  @include selectionContrastRules($type, $theme);
  @include tabContrastRules($type, $theme);
  @include textfieldContrastRules($type, $theme);
  @include toolbarContrastRules($type, $theme);

  @include dialogContrastRules($type, $theme);
}

@mixin componentColoredRules($value: "var(--color)") {
  @include bottomnavColoredRules($value);
  @include buttonColoredRules($value);
  @include listColoredRules($value);
  @include menuColoredRules($value);
  @include selectionColoredRules($value);
  @include tabColoredRules($value);
  @include textfieldColoredRules($value);
  @include toolbarColoredRules($value);

  @include dialogColoredRules($value);
}

@mixin componentThemeRules($theme: null) {
  @include bottomnavThemeRules($theme);
  @include buttonThemeRules($theme);
  @include listThemeRules($theme);
  @include menuThemeRules($theme);
  @include selectionThemeRules($theme);
  @include tabThemeRules($theme);
  @include textfieldThemeRules($theme);
  @include toolbarThemeRules($theme);

  @include dialogThemeRules($theme);
}

@mixin addTheme($primary, $accent, $warn, $background:"grey", $name:"default") {
  $theme: (
    "primary": $primary,
    "accent": $accent,
    "warn": $warn,
    "background": $background,
    "name": $name
  );
  $map: (
    #{$name} : $theme
  );
  $theme-map: map-merge($theme-map, $map) !global;
}

@mixin addColors($colors...) {
  @each $color in $colors {
    $explicit-color-list: append($explicit-color-list, $color) !global;
  }
}

@mixin buildThemes() {
  @include buildFallbackThemes();
  @include buildVariableThemes();
}

@mixin buildFallbackThemes() {
  // Special IE10-11 rule (doesn't run on Edge)
  @include IEOnly {
    [mdw-theme-fill~="primary-0"],
    [mdw-theme-fill~="accent-0"],
    [mdw-theme-fill~="warn-0"],
    [mdw-theme-fill~="background-0"] {
      background-color: white;
    }
    [mdw-theme-fill~="primary-0"],
    [mdw-theme-fill~="accent-0"],
    [mdw-theme-fill~="warn-0"],
    [mdw-theme-fill~="background-0"],
    [mdw-theme-fill~="light"] {
      @include componentContrastRules('light');
      :not([mdw-theme-fill]) {
        @include componentContrastRules('light');
      }
    }
    [mdw-theme-color~="primary-0"],
    [mdw-theme-color~="accent-0"],
    [mdw-theme-color~="warn-0"],
    [mdw-theme-color~="background-0"]{
      color: white;
      @include componentColoredRules("255 255 255");
    }

    @each $theme in map-values($theme-map) {
      $name: map-get($theme, "name");
      $namespace: if($name == 'default', '@at-root', unquote(".mdw-theme-#{$name}"));

      @each $color in ('primary', 'accent', 'warn', 'background') {
        $palette: map-get($palettes, map-get($theme, $color));
        $tone-filter: map-get($ie11-tones, $color);
        $lightTones: map-get($palette, 'light');
        $darkTones: map-get($palette, 'dark');
        @each $tone in $lightTones {
          @if (index($tone-filter, $tone) != null) {
            $value: map-get($palette, $tone);
            $rgbValue: red($value), green($value), blue($value);
            @if ($tone == '500') {
              #{$namespace} {
                [mdw-theme-fill~="#{$color}"] {
                  background-color: $value;
                  @include componentContrastRules('light', $theme);
                  :not([mdw-theme-fill]) {
                    @include componentContrastRules('light', $theme);
                  }
                }
                [mdw-theme-color~="#{$color}"] {
                  color: $value;
                  @include componentColoredRules($rgbValue);
                }
              }
            }
            #{$namespace} {
              [mdw-theme-fill~="#{$color}-#{$tone}"] {
                background-color: $value;
                @include componentContrastRules('light', $theme);
                :not([mdw-theme-fill]) {
                  @include componentContrastRules('light', $theme);
                }
              }
              [mdw-theme-color~="#{$color}-#{$tone}"] {
                color: $value;
                @include componentColoredRules($rgbValue);
              }
            }
          }
        }
        $contrastType: if($color == 'background', 'dark-background', 'dark');
        @each $tone in $darkTones {
          @if (index($tone-filter, $tone) != null) {
            $value: map-get($palette, $tone);
            $rgbValue: red($value),green($value),blue($value);
            @if ($tone == '500') {
              #{$namespace} {
                [mdw-theme-fill~="#{$color}"] {
                  background-color: $value;
                  @include componentContrastRules($contrastType, $theme);
                  :not([mdw-theme-fill]) {
                    @include componentContrastRules($contrastType, $theme);
                  }
                }
                [mdw-theme-color~="#{$color}"] {
                  color: $value;
                  @include componentColoredRules($rgbValue);
                }
              }
            }
            #{$namespace} {
              [mdw-theme-fill~="#{$color}-#{$tone}"] {
                background-color: $value;
                @include componentContrastRules($contrastType, $theme);
                :not([mdw-theme-fill]) {
                  @include componentContrastRules($contrastType, $theme);
                }
              }
              [mdw-theme-color~="#{$color}-#{$tone}"] {
                color: $value;
                @include componentColoredRules($rgbValue);
              }
            }
          }
        }
      }
      #{$namespace} {
        @include componentThemeRules($theme);
      }
    }
    [mdw-theme-fill~="primary-1000"],
    [mdw-theme-fill~="accent-1000"],
    [mdw-theme-fill~="warn-1000"],
    [mdw-theme-fill~="background-1000"] {
      background-color: black;
    }
    [mdw-theme-color~="primary-1000"],
    [mdw-theme-color~="accent-1000"],
    [mdw-theme-color~="warn-1000"],
    [mdw-theme-color~="background-1000"] {
      color: black;
      @include componentColoredRules("0 0 0");
    }
    @each $color in ('primary', 'accent', 'warn') {
      [mdw-theme-fill~="#{$color}-1000"],
      [mdw-theme-fill|="#{$color}"][mdw-theme-fill~="dark"] {
        @include componentContrastRules($color);
        :not([mdw-theme-fill]) {
          @include componentContrastRules($color);
        }
      }
    }
    [mdw-theme-fill~="background-1000"],
    [mdw-theme-fill~="dark"] {
      @include componentContrastRules('dark-background');
      :not([mdw-theme-fill]) {
        @include componentContrastRules('dark-background');
      }
    }

    @each $color in $explicit-color-list {
      $palette: map-get($palettes, $color);
      @each $tone in $tone-list {
        $value: map-get($palette, $tone);
        @if ($tone == '500') {
          [mdw-theme-fill~="#{$color}"] {
            background-color: $value;
          }
          [mdw-theme-color~="#{$color}"] {
            color: $value;
          }
        }
        [mdw-theme-fill~="#{$color}-#{$tone}"] {
          background-color: $value;
        }
        [mdw-theme-color~="#{$color}-#{$tone}"] {
          color: $value;
        }
      }
    }
  }
}

@mixin buildVariableThemes() {
  @each $color in $explicit-color-list {
    @include addSinglePaletteColorVariables($color);
  }
  @each $theme in map-values($theme-map) {
    $colors: (
      map-get($theme, "primary"),
      map-get($theme, "accent"),
      map-get($theme, "warn"),
      map-get($theme, "background")
    );
    @each $color in $colors {
      @if (index($explicit-color-list, color) == null) {
        @include addSinglePaletteColorVariables($color);
      }
    }
  }

  @each $theme in map-values($theme-map) {
    $primary: map-get($theme, "primary");
    $accent: map-get($theme, "accent");
    $warn: map-get($theme, "warn");
    $background: map-get($theme, "background");
    $name: map-get($theme, "name");
    $namespace: if($name == 'default', null, unquote(".mdw-theme-#{$name}"));
    @include buildPalettes($namespace, $primary, $accent, $warn, $background);
  }

  @each $color in ('primary', 'accent', 'warn', 'background') { 
    [mdw-theme-fill~="#{$color}-0"] {
      --background-color: unquote("255,255,255");
    }
    [mdw-theme-color~="#{$color}-0"] {
      --color: unquote("255,255,255");
    }
    @each $tone in $tone-list {
      @if ($tone == '500') {
        [mdw-theme-fill~="#{$color}"] {
          --background-color: unquote("var(--#{$color}-color)");
        }
        [mdw-theme-color~="#{$color}"] {
          --color: unquote("var(--#{$color}-color)");
        }
      }
      [mdw-theme-fill~="#{$color}-#{$tone}"] {
        --background-color: unquote("var(--#{$color}-#{$tone}-color)");
      }
      [mdw-theme-color~="#{$color}-#{$tone}"] {
        --color: unquote("var(--#{$color}-#{$tone}-color)");
      }
    }
    [mdw-theme-fill~="#{$color}-1000"] {
      --background-color: unquote("0,0,0");
    }
    [mdw-theme-color~="#{$color}-1000"] {
      --color: unquote("0,0,0");
    }
  }
  @each $color in $explicit-color-list {
    @each $tone in $tone-list {
      @if ($tone == '500') {
        [mdw-theme-fill~="#{$color}"] {
          --background-color: unquote("var(--#{$color}-color)");
        }
        [mdw-theme-color~="#{$color}"] {
          --color: unquote("var(--#{$color}-color)");
        }
      }
      [mdw-theme-fill~="#{$color}-#{$tone}"] {
        --background-color: unquote("var(--#{$color}-#{$tone}-color)");
      }
      [mdw-theme-color~="#{$color}-#{$tone}"] {
        --color: unquote("var(--#{$color}-#{$tone}-color)");
      }
    }
  }

  [mdw-theme-fill] {
    background-color: unquote("rgb(var(--background-color))");
  }
  [mdw-theme-color] {
    color: unquote("rgb(var(--color))");
  }


  // Light rules
  [mdw-theme-fill~="primary-0"],
  [mdw-theme-fill~="accent-0"],
  [mdw-theme-fill~="warn-0"],
  [mdw-theme-fill~="background-0"],
  [mdw-theme-fill~="light"],
  :root {
    @include lightVariables();
  }
  @each $theme in map-values($theme-map) {
    $name: map-get($theme, "name");
    $namespace: if($name == 'default', '@at-root', unquote(".mdw-theme-#{$name}"));

    @each $color in ('primary', 'accent', 'warn', 'background') {
      $palette: map-get($palettes, map-get($theme, $color));
      $lightTones: map-get($palette, 'light');
      #{$namespace} {
        @each $tone in $lightTones {
          @if ($tone == '500') {
            [mdw-theme-fill~="#{$color}"] {
              @include lightVariables($color);
            }
          }
          [mdw-theme-fill~="#{$color}-#{$tone}"] {
            @include lightVariables($color);
          }
        }
      }
    }
    @each $color in ('primary', 'accent', 'warn') {
      [mdw-theme-fill|="#{$color}"][mdw-theme-fill~="light"] {
        @include lightVariables($color);
      }
    }
  }

  // Dark Variables
  @each $theme in map-values($theme-map) {
    $name: map-get($theme, "name");
    $namespace: if($name == 'default', '@at-root', unquote(".mdw-theme-#{$name}"));
    @each $color in ('primary', 'accent', 'warn') {
      $palette: map-get($palettes, map-get($theme, $color));
      $darkTones: map-get($palette, 'dark');
      #{$namespace} {
        @each $tone in $darkTones {
          $value: map-get($palette, $tone);
          @if ($tone == '500') {
            [mdw-theme-fill~="#{$color}"] {
              @include darkVariables($color);
            }
          }
          [mdw-theme-fill~="#{$color}-#{$tone}"] {
            @include darkVariables($color);
          }
        }
      }
    }
    @each $color in ('primary', 'accent', 'warn') {
      [mdw-theme-fill~="#{$color}-1000"][mdw-theme-fill~="dark"],
      [mdw-theme-fill|="#{$color}"][mdw-theme-fill~="dark"] {
        @include darkVariables($color);
      }
    }
  }

  // Dark Background Variables
  @each $theme in map-values($theme-map) {
    $name: map-get($theme, "name");
    $namespace: if($name == 'default', '@at-root', unquote(".mdw-theme-#{$name}"));
    $color: 'background';
    $palette: map-get($palettes, map-get($theme, $color));
    $darkTones: map-get($palette, 'dark');
    #{$namespace} {
      @each $tone in $darkTones {
        $value: map-get($palette, $tone);
        @if ($tone == '500') {
          [mdw-theme-fill~="#{$color}"] {
            @include darkVariables($color);
          }
        }
        [mdw-theme-fill~="#{$color}-#{$tone}"] {
          @include darkVariables($color);
        }
      }
    }
  }

  [mdw-theme-fill~="background-1000"],
  [mdw-theme-fill~="dark"] {
    @include darkVariables('background');
  }

  @include componentContrastRules();
  @include componentColoredRules();
  @include componentThemeRules();
}

@mixin addSinglePaletteColorVariables($name) {
  $palette: map-get($palettes, $name);
  @if (index($added-palettes-list, $name) == null) {
    @each $tone in map-keys(map-remove($palette, "light", "dark")) {
      $value: map-get($palette, $tone);
      :root {
        --#{$name}-#{$tone}-color: red($value),green($value),blue($value);
        @if ($tone == "500") {
          --#{$name}-color: red($value),green($value),blue($value);
        } 
      }
      $added-palettes-list: append($added-palettes-list, $name) !global;
    }
  }
}

@mixin buildPalettes($namespace, $primary, $accent, $warn, $background) {
  @include buildPalette($namespace, 'primary', $primary);
  @include buildPalette($namespace, 'accent', $accent);
  @include buildPalette($namespace, 'warn', $warn);
  @include buildPalette($namespace, 'background', $background);
}
  
@mixin buildPalette($namespace, $color, $name) {
  $palette: map-get($palettes, $name);
  @each $tone in map-keys(map-remove($palette, "light", "dark")) {
    $value: map-get($palette, $tone);
    #{if($namespace, #{$namespace}, ":root, .mdw-theme-default")} {
      --#{$color}-#{$tone}-color: var(--#{$name}-#{$tone}-color);
      @if ($tone == "500") {
        --#{$color}-color: var(--#{$name}-color);
      } 
    }
  }
}