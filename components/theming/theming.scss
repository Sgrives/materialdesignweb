@import 'palettes.scss';
@import '../components/bottomnav/theming.scss';
@import '../components/button/theming.scss';
@import '../components/list/theming.scss';
@import '../components/selection/theming.scss';
@import '../components/textfield/theming.scss';
@import '../components/toolbar/theming.scss';

$ie11-tones: (
  primary: ("500", "700"),
  accent: ("A100", "A200", "A400", "A700"),
  warn: ("500", "700"),
  background: ("50", "100", "800", "900")
) !default;

$tone-list: ("50", "100", "200", "300", "400", "500", "600", "700", "800", "900", "A100", "A200", "A400", "A700");
$added-palettes-list: ();
$theme-map: ();

@mixin lightVariables($color:"background") {
  --primary-text-color: rgba(0,0,0,0.87);
  --secondary-text-color: rgba(0,0,0,0.54);
  --disabled-color: rgba(0,0,0,0.38);
  --divider-color: rgba(0,0,0,0.12);
  @include bottomnavThemeVariables($color, 'light');
  @include buttonThemeVariables($color, 'light');
  @include listThemeVariables($color, 'light');
  @include selectionThemeVariables($color, 'light');
  @include textfieldThemeVariables($color, 'light');
  @include toolbarThemeVariables($color, 'light');
}

@mixin darkVariables($color:"background") {
  --primary-text-color: rgba(255,255,255,1.0);
  --secondary-text-color: rgba(255,255,255,0.70);
  --disabled-color: rgba(255,255,255,0.50);
  --divider-color: rgba(255,255,255,0.12);
  @include bottomnavThemeVariables($color, 'dark');
  @include buttonThemeVariables($color, 'dark');
  @include listThemeVariables($color, 'dark');
  @include selectionThemeVariables($color, 'dark');
  @include textfieldThemeVariables($color, 'dark');
  @include toolbarThemeVariables($color, 'dark');
}

@mixin componentContrastRules($type: 'var', $theme: null) {
  @include bottomnavContrastRules($type, $theme);
  @include buttonContrastRules($type, $theme);
  @include listContrastRules($type, $theme);
  @include selectionContrastRules($type, $theme);
  @include textfieldContrastRules($type, $theme);
  @include toolbarContrastRules($type, $theme);
}

@mixin componentColoredRules($value: "var(--color)") {
  @include bottomnavColoredRules($value);
  @include buttonColoredRules($value);
  @include listColoredRules($value);
  @include selectionColoredRules($value);
  @include textfieldColoredRules($value);
  @include toolbarColoredRules($value);
}

@mixin componentThemeRules($theme: null) {
  @include bottomnavThemeRules($theme);
  @include buttonThemeRules($theme);
  @include listThemeRules($theme);
  @include selectionThemeRules($theme);
  @include textfieldThemeRules($theme);
  @include toolbarThemeRules($theme);
}

@mixin addTheme($primary, $accent, $warn, $background:"grey", $name:"default") {
  $theme: (
    "primary": $primary,
    "accent": $accent,
    "warn": $warn,
    "background": $background,
    "name": $name
  );
  $map: (
    #{$name} : $theme
  );
  $theme-map: map-merge($theme-map, $map) !global;
}

@mixin buildThemes() {
  @include buildFallbackThemes();
  @include buildVariableThemes();
}


@mixin buildFallbackThemes() {
  // Special IE10-11 rule (doesn't run on Edge)
  // @media required so variables-based rules don't conflict
  @media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {
    [mdw-color][mdw-tone="0"] {
      // mdw-color required for specificity
      &.mdw-theme__colored {
        color: white;
        
        @include componentColoredRules("255 255 255");
      }
      &.mdw-theme__filled {
        background-color: white;
        @include componentContrastRules('light');
        :not(.mdw-theme__filled) {
          @include componentContrastRules('light');
        }
      }
    }

    @each $theme in map-values($theme-map) {
      $primary: map-get($theme, "primary");
      $accent: map-get($theme, "accent");
      $warn: map-get($theme, "warn");
      $background: map-get($theme, "background");
      $name: map-get($theme, "name");
      $namespace: if($name == 'default', '@at-root', unquote(".mdw-theme-#{$name}"));

      @each $color in ('primary', 'accent', 'warn', 'background') {
        $palette: map-get($palettes, map-get($theme, $color));
        $tone-filter: map-get($ie11-tones, $color);
        $lightTones: map-get($palette, 'light');
        $darkTones: map-get($palette, 'dark');
        @each $tone in $lightTones {
          @if (index($tone-filter, $tone) != null) {
            $value: map-get($palette, $tone);
            $rgbValue: red($value), green($value), blue($value);
            @if ($tone == '500') {
              #{$namespace} {
                [mdw-color="#{$color}"]:not([mdw-tone]) {
                  &.mdw-theme__filled {
                    background-color: $value;
                    @include componentContrastRules('light', $theme);
                    :not(.mdw-theme__filled) {
                      @include componentContrastRules('light', $theme);
                    }
                  }
                  &.mdw-theme__colored {
                    color: $value;
                    @include componentColoredRules($rgbValue);
                  }
                }
              }
            }
            #{$namespace} {
              [mdw-color="#{$color}"][mdw-tone="#{$tone}"] {
                &.mdw-theme__filled {
                  background-color: $value;
                  @include componentContrastRules('light', $theme);
                  :not(.mdw-theme__filled) {
                    @include componentContrastRules('light', $theme);
                  }
                }
                &.mdw-theme__colored {
                  color: $value;
                  @include componentColoredRules($rgbValue);
                }
              }
            }
          }
        }
        $contrastType: if($color == 'background', 'dark-background', 'dark');
        @each $tone in $darkTones {
          @if (index($tone-filter, $tone) != null) {
            $value: map-get($palette, $tone);
            $rgbValue: red($value),green($value),blue($value);
            @if ($tone == '500') {
              #{$namespace} {
                [mdw-color="#{$color}"]:not([mdw-tone]) {
                  &.mdw-theme__filled {
                    background-color: $value;
                    @include componentContrastRules($contrastType, $theme);
                    :not(.mdw-theme__filled) {
                      @include componentContrastRules($contrastType, $theme);
                    }
                  }
                  &.mdw-theme__colored {
                    color: $value;
                    @include componentColoredRules($rgbValue);
                  }
                }
              }
            }
            #{$namespace} {
              [mdw-color="#{$color}"][mdw-tone="#{$tone}"] {
                &.mdw-theme__filled {
                  background-color: $value;
                  @include componentContrastRules($contrastType, $theme);
                  :not(.mdw-theme__filled) {
                    @include componentContrastRules($contrastType, $theme);
                  }
                }
                &.mdw-theme__colored {
                  color: $value;
                  @include componentColoredRules($rgbValue);
                }
              }
            }
          }
        }
      }
      #{$namespace} {
        @include componentThemeRules($theme);
      }
    }
    [mdw-color][mdw-tone="1000"] {
      &.mdw-theme__colored {
        color: black;
        @include componentColoredRules("0 0 0");
      }
      &.mdw-theme__filled {
        background-color: black;
        @include componentContrastRules('dark-background');
        :not(.mdw-theme__filled) {
          @include componentContrastRules('dark-background');
        }
      }
    }
  }
}

@mixin buildVariableThemes() {
  @each $theme in map-values($theme-map) {
    $primary: map-get($theme, "primary");
    $accent: map-get($theme, "accent");
    $warn: map-get($theme, "warn");
    $background: map-get($theme, "background");
    @include addPaletteColorVariables($primary, $accent, $warn, $background);
  }

  @each $theme in map-values($theme-map) {
    $primary: map-get($theme, "primary");
    $accent: map-get($theme, "accent");
    $warn: map-get($theme, "warn");
    $background: map-get($theme, "background");
    $name: map-get($theme, "name");
    $namespace: if($name == 'default', null, unquote(".mdw-theme-#{$name}"));
    @include buildPalettes($namespace, $primary, $accent, $warn, $background);
  }

  :root {
    @include lightVariables('background');
  }

  [mdw-color][mdw-tone="0"] {
    // mdw-color required for specificity
    --color: unquote("255,255,255");
    @include lightVariables('background');
  }
  @each $color in ('primary', 'accent', 'warn', 'background') { 
    @each $tone in $tone-list {
      @if ($tone == '500') {
        [mdw-color="#{$color}"]:not([mdw-tone]) {
          --color: unquote("var(--#{$color}-color)");
        }
      }
      [mdw-color="#{$color}"][mdw-tone="#{$tone}"] {
        --color: unquote("var(--#{$color}-#{$tone}-color)");
      }
    }
    [mdw-color="#{$color}"][mdw-tone="1000"] {
      --color: unquote("0,0,0");
      @include darkVariables($color);
    }
  }

  .mdw-theme__filled[mdw-color] {
    background-color: unquote("rgb(var(--color))");
    --background-color: var(--color);
  }
  .mdw-theme__colored[mdw-color] {
    color: unquote("rgb(var(--color))");
  }
  
  @each $theme in map-values($theme-map) {
    $primary: map-get($theme, "primary");
    $accent: map-get($theme, "accent");
    $warn: map-get($theme, "warn");
    $background: map-get($theme, "background");
    $name: map-get($theme, "name");
    $namespace: if($name == 'default', '@at-root', unquote(".mdw-theme-#{$name}"));

    @each $color in ('primary', 'accent', 'warn', 'background') {
      $palette: map-get($palettes, map-get($theme, $color));
      $lightTones: map-get($palette, 'light');
      $darkTones: map-get($palette, 'dark');
      #{$namespace} {
        @each $tone in $lightTones {
          @if ($tone == '500') {
            .mdw-theme__filled[mdw-color="#{$color}"]:not([mdw-tone]) {
              @include lightVariables($color);
            }
          }
          .mdw-theme__filled[mdw-color="#{$color}"][mdw-tone="#{$tone}"] {
            @include lightVariables($color);
          }
        }
      }
    }
    @each $color in ('primary', 'accent', 'warn', 'background') {
      $palette: map-get($palettes, map-get($theme, $color));
      $lightTones: map-get($palette, 'light');
      $darkTones: map-get($palette, 'dark');
      #{$namespace} {
        @each $tone in $darkTones {
          $value: map-get($palette, $tone);
          @if ($tone == '500') {
            .mdw-theme__filled[mdw-color="#{$color}"]:not([mdw-tone]) {
              @include darkVariables($color);
            }
          }
          .mdw-theme__filled[mdw-color="#{$color}"][mdw-tone="#{$tone}"] {
            @include darkVariables($color);
          }
        }
      }
    }
  }

  @include componentContrastRules();
  @include componentColoredRules();
  @include componentThemeRules();
}

@mixin addPaletteColorVariables($primary, $accent, $warn, $background) {
  @include addSinglePaletteColorVariables('primary', $primary);
  @include addSinglePaletteColorVariables('accent', $accent);
  @include addSinglePaletteColorVariables('warn', $warn);
  @include addSinglePaletteColorVariables('background', $background);
}

@mixin addSinglePaletteColorVariables($color, $name) {
  $palette: map-get($palettes, $name);
  @if (index($added-palettes-list, $name) == null) {
    @each $tone in map-keys(map-remove($palette, "light", "dark")) {
      $value: map-get($palette, $tone);
      :root {
        --#{$name}-#{$tone}-color: red($value),green($value),blue($value);
        @if ($tone == "500") {
          --#{$name}-color: red($value),green($value),blue($value);
        } 
      }
      $added-palettes-list: append($added-palettes-list, $name) !global;
    }
  }
}

@mixin buildPalettes($namespace, $primary, $accent, $warn, $background) {
  @include buildPalette($namespace, 'primary', $primary);
  @include buildPalette($namespace, 'accent', $accent);
  @include buildPalette($namespace, 'warn', $warn);
  @include buildPalette($namespace, 'background', $background);
}
  
@mixin buildPalette($namespace, $color, $name) {
  $palette: map-get($palettes, $name);
  @each $tone in map-keys(map-remove($palette, "light", "dark")) {
    $value: map-get($palette, $tone);
    #{if($namespace, #{$namespace}, ":root, .mdw-theme-default")} {
      --#{$color}-#{$tone}-color: var(--#{$name}-#{$tone}-color);
      @if ($tone == "500") {
        --#{$color}-color: var(--#{$name}-color);
      } 
    }
  }
}