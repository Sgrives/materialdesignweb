@import '../common/functions.scss';
@import '../common/mixins.scss';

$buttonColors: (
  text-color:                ( rgba(#000, 0.87), rgba(#fff, 1.00)),
  active-color:              ( rgba(#000, 0.54), rgba(#fff, 1.00)),
  inactive-color:            ( rgba(#000, 0.38), rgba(#fff, 0.50)),
  press-color:               ( rgba(#999, 0.40), rgba(#CCC, 0.25)),
  ripple-color:              ( rgba(#000, 0.12), rgba(#fff, 0.30), rgba(#fff, 0.20)),
  focus-overlay:             ( rgba(#000, 0.12), rgba(#000, 0.12), rgba(#fff, 0.20)),
  disabled-text-color:       ( rgba(#000, 0.26), rgba(#fff, 0.30)),
  disabled-background-color: ( rgba(#000, 0.12), rgba(#fff, 0.12)),
);

@function buttonThemeValue($key, $type) {
  @return themeValue('button', $buttonColors, $key, $type);
}

@mixin buttonThemeVariables($color, $lightness) {
  @include themeVariables('button', $buttonColors, $color, $lightness);
}

// Vary by contrast
@mixin buttonContrastRules($type: 'var') {
  @at-root {
    #{&}.mdw-button {
      &:not(.mdw-theme__colored):not([disabled]) {
        color: buttonThemeValue("text-color", $type);
      }
      &[mdw-active] {
        color: buttonThemeValue("active-color", $type);
      }
      &[mdw-inactive] {
        color: buttonThemeValue("inactive-color", $type);
      }
      &:not(.mdw-theme__colored)::before {
        background-image: radial-gradient(
          circle at center,
          transparent 10%,
          buttonThemeValue("ripple-color", $type) 10.0001%);
        background-color: transparent;
      }
      &:active:not(.mdw-theme__colored)::before,
      &:active:focus:not(.mdw-theme__colored)::before {
        background-color: buttonThemeValue("press-color", $type);
      }
      &:focus:not(:active):not(.mdw-theme__colored)::before {
        background-color: buttonThemeValue("focus-overlay", $type);
      }
      &[mdw-icon]:focus:not(:active):not(.mdw-theme__colored)::before {
        background-color: buttonThemeValue("ripple-color", $type);
      }
      & > .mdw-ripple,
      &::after {
        background-image: radial-gradient(
          circle at center,
          buttonThemeValue("ripple-color", $type) 10%,
          transparent 10.0001%);
      }
      &[disabled],
      &.mdw-theme__colored[disabled], {
        color: buttonThemeValue("disabled-text-color", $type);
      }
      &.mdw-theme__filled[disabled] {
        // Disabled filled buttons use parent's theming context
        @if ($type == 'var') {
          --button__disabled-text-color: inherit;
          --button__disabled-background-color: inherit;
          color: buttonThemeValue("disabled-text-color", 'var');
          background-color: buttonThemeValue("disabled-text-color", 'var');
        } @else {
          // Average color, 50% opacity
          color: mix(
            buttonThemeValue("disabled-text-color", 'light'),
            buttonThemeValue("disabled-text-color", 'dark')
          );
          background-color: mix(
            buttonThemeValue("disabled-background-color", 'light'),
            buttonThemeValue("disabled-background-color", 'dark')
          );
        }
        
      }
    }
  }
}

// Varies by current color
@mixin buttonColoredRules($value: "var(--color)") {
  @at-root {
    #{&}.mdw-button.mdw-theme__colored {
      &::before {
        background-image: radial-gradient(
          circle at center,
          transparent 10%,
          unquote("rgba(#{$value}, 0.26)") 10.0001%
        );
      }
      &:focus:not(:active)::before {
        background-color: unquote("rgba(#{$value}, 0.12)");
      }
      &[mdw-icon]:focus:not(:active)::before {
        background-color: unquote("rgba(#{$value}, 0.26)")
      }
      &:active::before,
      &:focus:active::before {
        background-color: unquote("rgba(#{$value}, 0.20)");
      }
    }
  }
}

// Varies by theme
@mixin buttonThemeRules($theme: null, $palettes: null) {
  .mdw-button.mdw-theme__filled {
    &[mdw-color="primary"] {
      &:active::before,
      &:active:focus::before {
        @if ($theme) {
          background-color: getThemePaletteColor($palettes, $theme, 'primary', '700');
        } @else {
          background-color: unquote("rgb(var(--primary-700-color))");
        }
      }
    }
    &[mdw-color="accent"] {
      &:active::before,
      &:active:focus::before {
        @if ($theme) {
          background-color: getThemePaletteColor($palettes, $theme, 'accent', '700');
        } @else {
          background-color: unquote("rgb(var(--accent-700-color))");
        }
      }
    }
    &[mdw-color="warn"] {
      &:active::before,
      &:active:focus::before {
        @if ($theme) {
          background-color: getThemePaletteColor($palettes, $theme, 'warn', '700');
        } @else {
          background-color: unquote("rgb(var(--warn-700-color))");
        }
      }
    }
  }
}