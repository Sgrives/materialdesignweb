@function str-replace($string, $search, $replace: '') {
  $index: str-index($string, $search);
  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }
  @return $string;
}

$light: 1;
$dark: 2;
$dark-background: 3;

$buttonMap: (
  text-color:                ( rgba(#000, 0.87), rgba(#fff ,1.00), rgba(#fff ,1.00)),
  active-color:              ( rgba(#000, 0.54), rgba(#fff, 1.00), rgba(#fff, 1.00)),
  inactive-color:            ( rgba(#000, 0.38), rgba(#fff, 0.50), rgba(#fff, 0.50)),
  press-color:               ( rgba(#999, 0.40), rgba(#CCC, 0.25), rgba(#CCC, 0.25)),
  ripple-color:              ( rgba(#000, 0.12), rgba(#fff, 0.30), rgba(#fff, 0.20)),
  focus-overlay:             ( rgba(#000, 0.12), rgba(#000, 0.12), rgba(#fff, 0.20)),
  disabled-text-color:       ( rgba(#000, 0.26), rgba(#fff, 0.30), rgba(#fff, 0.30)),
  disabled-background-color: ( rgba(#000, 0.12), rgba(#fff, 0.12), rgba(#fff, 0.12))
);

@mixin buttonLightThemeVariables($color) {
  @each $key in map-keys($map: $buttonMap) {
    $keyValue: map-get($map: $buttonMap, $key: $key);
    $value: nth($keyValue, $light);
    --button__#{$key}: $value;
  }
}

@mixin buttonDarkThemeVariables($color) {
  @each $key in map-keys($map: $buttonMap) {
    $keyValue: map-get($map: $buttonMap, $key: $key);
    $value: nth($keyValue, if($color == 'background', $dark-background, $dark));
    --button__#{$key}: $value;
  }
}



@mixin themeRule($rule, $key, $type, $string: "$value") {
  $index: str-index($string, "$value");
  @if (index($type, 'light') != null) {
    $value: nth(map-get($buttonMap, $key), $light);
    #{$rule}: unquote(str-replace($string, "$value", $value));
  }
  @if (index($type, 'dark') != null) {
    $value: nth(map-get($buttonMap, $key), $dark);
    #{$rule}: unquote(str-replace($string, "$value", $value));
  }
  @if (index($type, 'var') != null) {
    #{$rule}: unquote(str-replace($string, "$value", unquote("var(--button__#{$key})")));  
  }
}

// Vary by contrast
@mixin buttonContrastRules($type: 'var') {
  .mdw-button {
    @include themeRule("color", "text-color", $type);
    &[mdw-active] {
      @include themeRule("color", "active-color", $type);
    }
    &[mdw-inactive] {
      @include themeRule("color", "inactive-color", $type);
    }
    &::before {
      @include themeRule(
        "background-image",
        "ripple-color",
        $type,
        "radial-gradient(circle at center, transparent 10%, $value 10.0001%)"
      );
      background-color: transparent;
    }
    &:active::before,
    &:active:focus::before {
      @include themeRule("background-color", "press-color", $type);
    }
    &:focus:not(:active)::before {
      @include themeRule("background-color", "focus-overlay", $type);
    }
    &[mdw-icon]:focus:not(:active)::before {
      @include themeRule("background-color", "ripple-color", $type);
    }
    & > .mdw-ripple,
    &::after {
      @include themeRule(
        "background-image",
        "ripple-color",
        $type,
        "radial-gradient(circle at center, $value 10%, transparent 10.0001%)"
      );
    }
    &[disabled],
    &.mdw-button.mdw-theme__colored[disabled], {
      @include themeRule("color", "disabled-text-color", $type);
    }
    &.mdw-theme__filled[disabled] {
      // Disabled filled buttons use parent's variables
      --button__disabled-text-color: inherit;
      --button__disabled-background-color: inherit;
      // TODO: include fallback
      @include themeRule("background-color", "disabled-background-color", $type);
    }
  }
}

// Varies by current color
@mixin buttonColoredRules($value: "var(--color)") {
  .mdw-button {
    &::before {
      background-image: radial-gradient(
        circle at center,
        transparent 10%,
        unquote("rgba(#{$value}, 0.26)") 10.0001%
      );
    }
    &[mdw-icon]:focus:not(:active)::before {
      background-color: unquote("rgba(#{$value}, 0.26)")
    }
    &:focus:not(:active)::before {
      background-color: unquote("rgba(#{$value}, 0.12)");
    }
    &:focus:active::before,
    &:active::before {
      background-color: unquote("rgba(#{$value}, 0.20)");
    }
  }
}

// Varies by theme
@mixin buttonThemeRules() {
  .mdw-button.mdw-theme__filled {
    &[mdw-color="primary"] {
      &:active::before,
      &:active:focus::before {
        background-color: unquote("rgb(var(--primary-700-color))");
      }
    }
    &[mdw-color="accent"] {
      &:active::before,
      &:active:focus::before {
        background-color: unquote("rgb(var(--accent-700-color))");
      }
    }
    &[mdw-color="warn"] {
      &:active::before,
      &:active:focus::before {
        background-color: unquote("rgb(var(--warn-700-color))");
      }
    }
    
  }
}