// https://material.io/guidelines/components/progress-activity.html#

$radius: 8.75;
$pi: 3.14159265359;
$circumference: 2 * $pi * $radius;
$duration: 1333ms;

/* Linear interpolate between $a and $b */
@function lerp($a, $b, $p) {
  @return ($b - $a) * $p + $a;
}

/* Linear interpolate assuming $a and $b are numeric two-item lists */
@function lerp-point($a, $b, $p) {
  @return ( lerp(nth($a, 1), nth($b, 1), $p), lerp(nth($a, 2), nth($b, 2), $p));
}


/* Reduce points to one in a beziery way */
@function bezier-reduce($points, $p) {
  @while length($points) > 1 {
    $tmp: ();
    @for $i from 1 through length($points) {
      @if $i < length($points) {
        $a: nth($points, $i);
        $b: nth($points, $i + 1);
        $tmp: append($tmp, lerp-point($a, $b, $p));
      }
    }
    $points: $tmp;
  }
  @return nth($points, 1);
}


@function circlePercentage($percent, $limit: 100) {
  @return $circumference * ((3 * ($limit/100)) - $percent/100);
}

/* Pure CSS Material Spin Animation
 * radius = 8.75
 * pi = 3.14159
 * circumference = 2 * pi * r = (54.977825)
 * dash-length = circumference * (100-x)/100 
 *
 * Every cycle rotates entire shape an additional -90deg (CCW)
 * 
 * Entire animation rotates 4x speed (CW)
 * 
 * 1. Start 0.072% from head
 * 2. Increase to 75% from head
 * 3. Reduce tail to 0.521% from tail 
 * 4. Rotate -90 deg
 *
 * TODO: Confirm bezier easing
 */


/* Material Ease */
$bezier-points: (0 0, 0.4 0, 0.2 1, 1 1);
@mixin createMaterialSpinAnimation($detail:30) {
  $totalFrames: $detail * 8;
  /* #{$totalFrames} frames */
  @for $iteration from 0 to 4 {
    $iterationRotation: -90 * $iteration;
    /* Ease-in 0-75%  */
    @for $i from 0 to $detail +1 {
      $rotation: ($i / $detail) * 180;
      $keyframe: (($iteration * $detail * 2) + $i) * 100 / $totalFrames;
      $percent: nth(bezier-reduce($bezier-points, ($i / $detail)), 1) * 75;
      @if ($percent==0) {
        $percent: 0.5;
        $keyframe: $keyframe + 0.0001;
      }
      #{$keyframe}% {
        /* circlePercentage(#{$percent}, 75); */
        stroke-dashoffset: circlePercentage($percent, 75);
        transform: rotate(#{$iterationRotation}deg);// rotate(#{$rotation}deg);
      }
    }
    /* Ease-out 75-150%  */
    @for $i from 1 to $detail +1 {
      $rotation: ($i / $detail) * 180 + 180;
      $keyframe: (($iteration * $detail * 2) + ($detail + $i)) * 100 / $totalFrames;
      $percent: nth(bezier-reduce($bezier-points, ($i / $detail)), 2) * 75 + 75;
      @if ($percent==150) {
        $percent: 149.5;
      }
      #{$keyframe}% {
        /* circlePercentage(#{$percent}, 75); */
        stroke-dashoffset: circlePercentage($percent, 75);
        transform: rotate(#{$iterationRotation}deg);// rotate(#{$rotation}deg);
      }
    }
  }
}

@keyframes material-spin__inner {
  @include createMaterialSpinAnimation(20);
}

@keyframes material-spin__outer {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}
.mdw-progress-circle {
  width: 48px;
  height: 48px;
  stroke-width: 2.5;
  margin: 8px;
  svg {
    width:100%;
    height:100%;
    transform: rotate(0deg);
    will-change: transform;
    animation-name: material-spin__outer;
    animation-duration: $duration;
    animation-timing-function: linear;
    animation-iteration-count: infinite;
    & > path {
      fill: none;
      stroke-width: inherit;
      stroke: currentColor;
      transform-origin: center center;
      &:nth-child(1) {
        stroke-linecap: square;
        stroke-dasharray: $circumference * 0.75;
        stroke-dashoffset: circlePercentage(33.33, 75);
        transform: rotate(0deg);
        will-change: stroke-dashoffset, transform;
        animation-name: material-spin__inner;
        animation-duration: $duration * 4;
        animation-timing-function: inherit;
        animation-iteration-count: inherit;
      }
      &:nth-child(2) {
        display: none;
        transition-property: stroke-dashoffset;
        transition-duration: $duration;
        stroke-dashoffset: circlePercentage(0, 100);
        stroke-dasharray: $circumference;
      }
      
    }
  }
  
  // IE and Edge do not support animated SVG
  @include MSOnly {
    &:not([mdw-determinate]) svg {
      animation-duration: $duration / 2;
    }
  }
}

.mdw-progress-circle[mdw-determinate] {
  svg {
    animation: none;
    will-change: none;
    transform: none;
    & > path {
      &:nth-child(1) {
        display: none;
        animation: none;
        will-change: none;
        transform: none;
      }
      &:nth-child(2) {
        display: inline;
      }
    }
  }
}

.mdw-progress-circle[value='100'] {
  svg {
    & > path:nth-child(2) {
      stroke-dashoffset: circlePercentage(100);
    }
  }
}

/* 
 Unused linear reference

@keyframes material-spin-linear {
  0% {
    stroke-dashoffset: circlePercentage(0.5, 75);
    transform: rotate(0deg) rotate(0deg);
  }
  12.5% {
    stroke-dashoffset: circlePercentage(75,75);
    transform: rotate(0deg) rotate(180deg);
  }
  25.0% {
    stroke-dashoffset: circlePercentage(149.5,75);
    transform: rotate(0deg) rotate(360deg);
  }
  25.001% {
    stroke-dashoffset: circlePercentage(0.5,75);
    transform: rotate(-90deg) rotate(0deg);
  }
  37.5% {
    stroke-dashoffset: circlePercentage(75,75);
    transform: rotate(-90deg) rotate(180deg);
  }
  50% {
    stroke-dashoffset: circlePercentage(149.5,75);
    transform: rotate(-90deg) rotate(360deg);
  }
  50.001% {
    stroke-dashoffset: circlePercentage(0.5,75);
    transform: rotate(-180deg) rotate(0deg);
  }
  67.5% {
    stroke-dashoffset: circlePercentage(75,75);
    transform: rotate(-180deg) rotate(180deg);
  }
  75% {
    stroke-dashoffset: circlePercentage(149.5,75);
    transform: rotate(-180deg) rotate(360deg);
  }
  75.001% {
    stroke-dashoffset: circlePercentage(0.5,75);
    transform: rotate(-270deg) rotate(0deg);
  }
  87.5% {
    stroke-dashoffset: circlePercentage(75,75);
    transform: rotate(-270deg) rotate(180deg);
  }
  100% {
    stroke-dashoffset: circlePercentage(149.5,75);
    transform: rotate(-270deg) rotate(360deg);
  }
}
*/
